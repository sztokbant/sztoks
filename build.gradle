plugins {
    id 'java'
    id 'maven-publish'
    id 'org.springframework.boot' version '2.4.2'
    id "io.spring.dependency-management" version "1.0.10.RELEASE"
    id "com.diffplug.spotless" version "5.8.2"
}

repositories {
    mavenCentral()

    // spring-mobile-starter
    maven { url "https://repo.spring.io/milestone" }
}

dependencies {
    implementation 'javax.servlet:jstl:1.2'
    implementation 'com.google.collections:google-collections:1.0'
    implementation 'org.apache.commons:commons-lang3:3.10'
    implementation 'org.apache.tomcat.embed:tomcat-embed-core:9.0.41'
    implementation 'org.apache.tomcat.embed:tomcat-embed-jasper:9.0.41'
    implementation 'org.joda:joda-money:1.0.1'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-tomcat'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.mobile:spring-mobile-starter:2.0.0.M3'

    implementation group: 'net.logstash.logback', name: 'logstash-logback-encoder', version: '7.3'

    runtimeOnly 'mysql:mysql-connector-java:8.0.20'
    testImplementation 'com.h2database:h2:1.4.200'
    testImplementation 'org.mockito:mockito-inline:3.7.0'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test:5.3.3.RELEASE'

    // Lombok
    compileOnly 'org.projectlombok:lombok:1.18.16'
    annotationProcessor 'org.projectlombok:lombok:1.18.16'
    testCompileOnly 'org.projectlombok:lombok:1.18.16'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.16'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
description = 'demo'
java.sourceCompatibility = JavaVersion.VERSION_1_8

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

configurations.implementation {
    spotless {
        java {
            // Ref.: https://github.com/diffplug/spotless/issues/240#issuecomment-385206606
            custom 'noWildcardImports', {
                if (it.contains('*;\n')) {
                    throw new Error('No wildcard imports allowed')
                }
            }
            bumpThisNumberIfACustomStepChanges(1)

            googleJavaFormat().aosp()
        }
    }
    compileJava {
        dependsOn spotlessApply
    }
}

test {
    useJUnitPlatform()
}